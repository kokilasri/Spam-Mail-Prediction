# import libraries

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score

# load dataset to pandas dataframe

raw_data = pd.read_csv('spamham.csv')

# replace null values with null stream

mail_data = raw_data.where((pd.notnull(raw_data)), '')
mail_data.shape
mail_data.head()

#label spam mail as 0 and non spam mail as 1

mail_data.loc[mail_data['Category'] == 'spam' , 'Category',] = 0
mail_data.loc[mail_data['Category'] == 'ham', 'Category',] = 1

#seperate the data as test and label

# X -> test, Y->labels

X = mail_data['Message']
Y = mail_data['Category']

# split the data as train and test data

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size=0.8, test_size=0.2, random_state=3)

# transform the data into feature vectors that can be used as input to the SVM model using Tfidf Vectorisation
#convert the text to lower case letters

feature_extraction = TfidfVectorizer(min_df=1, stop_words='english', lowercase='True')
X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)

#convert ytrain and ytest values to integers

Y_train = Y_train.astype('int')
Y_test = Y_test.astype('int')

#training the support vector machine
model = LinearSVC()
model.fit(X_train_features, Y_train)

Prediction_traindata = model.predict(X_train_features)
accuracy_traindata = accuracy_score(Y_train, Prediction_traindata)

print('Accuracy of Training Data: ', accuracy_traindata)

prediction_testdata = model.predict(X_test_features)
accuracy_testdata = accuracy_score(Y_test, prediction_testdata)

print('Accuracy of Test Data: ', accuracy_testdata)

model.score(X_test_features, Y_test)

input_mail = ["Free entry in 2 a wkly comp to win FA Cup final tkts 21st May 2005. Text FA to 87121 to receive entry question(std txt rate)T&C's apply 08452810075over18's"]
#convert text to features
feature_extraction = TfidfVectorizer(min_df=1, stop_words='english', lowercase='True')
X_train_features = feature_extraction.fit_transform(X_train)

#PREDICTION ON A NEW MAIL

input_mail_features = feature_extraction.transform(input_mail)

#predict the ans
prediction = model.predict(input_mail_features)
print(prediction)

if (prediction[0] == 0):
    print("This is a Spam Mail")
else:
    print("This is a Ham Mail")

input_mail = ["I've been searching for the right words to thank you for this breather. I promise i wont take your help for granted and will fulfil my promise. You have been wonderful and a blessing at all times."]
# convert text to feature vectors
feature_extraction = TfidfVectorizer(min_df=1, stop_words='english', lowercase='True')
X_train_features = feature_extraction.fit_transform(X_train)
input_mail_features = feature_extraction.transform(input_mail)

#making prediction
prediction = model.predict(input_mail_features)
print(prediction)

if (prediction[0]==1):
  print('HAM MAIL')
else:
  print('SPAM MAIL')